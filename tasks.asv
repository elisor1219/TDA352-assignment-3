%% Task 1
%Calculate the Lagrange coefficients
clc;clf;clear;
lastDecimal = 7;                %Calulated from assignment
i = mod(lastDecimal, 7) + 3;    %Given from assignment      
t = 3;                          %Given from assignment
p = 11;                         %Given from assignment

delta = zeros(1,p);

I = [i-1, i, i+1];
x = 0;

%Calulating all of the Lagrange coefficient
for share = I
    delta(share) =  mod(lagrangeBasisPolynomials(share,x,I), p);
end

%% Task 2
%Calulate the secret
f = zeros(1,p);
f(I) = [3, 5, 2];               %Given from assignment

f_0 = sum(f.*delta);
secret = mod(f_0, p);

%% Plot 1
clf;clc
hold on
fontSize = 15;
y_min = min(min(secret, f(I)) - 1);
y_max = max(max(secret, f(I)) + 1);
axis([-1 (i+1)+1 y_min y_max])
grid on
rng(10)
for j = I
    color = [rand, rand, rand];
    plot(j,f(j), 'o', 'MarkerFaceColor', color, ...
        'MarkerEdgeColor', color, 'MarkerSize',10)
end

text = ["Share # " + (i-1) , "Share # " + i, "Share # " + (i+1)];
legend(text, "FontSize", fontSize)
xlabel("i:th share", 'FontSize', fontSize)
ylabel("f(i)", 'FontSize', fontSize)
title("Plotting the points", "FontSize", fontSize)

saveas(gcf,"onlyThePoints.png")

%% Plot 2
clc;

x = linspace(-1,i+2);
deltaPlot = zeros(size(x,2), p);

for share = I
    deltaPlot(:,share) = lagrangeBasisPolynomials(share,x,I);
end

fPlotPre = zeros(size(x,2),p);
temp = ones(size(x,2),1);
fPlotPre(:,I) = [temp.*3, temp.*5, temp.*2];               %Given from assignment

fPlot = sum(fPlotPre.*deltaPlot,2);

plot(x, fPlot, "LineWidth", 1.3, "Color", "b")

legend([text, "Lagrange Interpolation"], "FontSize", fontSize)

saveas(gcf,"pointsWithInterpolation.png")

%% Plot 3
clf;clc
hold on
fontSize = 15;
grid on
rng(10)



plot(x, fPlot, "LineWidth", 1.3, "Color", "b")
for j = I
    color = [rand, rand, rand];
    plot(j,f(j), 'o', 'MarkerFaceColor', color, ...
        'MarkerEdgeColor', color, 'MarkerSize',10)
end

deltaPlot2 = zeros(1,p);
for share = I
    deltaPlot2(share) =  lagrangeBasisPolynomials(share,0,I);
end

color = [rand, rand, rand];
fPlot_0 = sum(fPlotPre(1,:).*deltaPlot2);
plot(0,fPlot_0, 'o', 'MarkerFaceColor', color, ...
            'MarkerEdgeColor', color, 'MarkerSize',10)

plot([0 0], [-35 10], 'black')
plot([-1 5], [0 0], 'black')

text = ["Share # " + (i-1) , "Share # " + i, "Share # " + (i+1), "Secret"];
legend(["Lagrange Interpolation", text], "FontSize", fontSize, "Location", "southeast")
xlabel("i:th share", 'FontSize', fontSize)
ylabel("f(i)", 'FontSize', fontSize)
title("Plotting the interpolation", "FontSize", fontSize)

saveas(gcf,"plottingTheInterpolation.png")

%% Task 3
%Order of group G
q = 23;

%Generators of the group
[temp, temp2] = findGenerators(q);
g = temp(1);
h = temp(2);

temp;

%temp2
%% Task 4
g = 2;          %Given from assignment
h = 6;          %Given from assignment

%Group G = subgroup of Z_23^*
p = 23;         %Given from assignment

%"Random value"
r = 13;
%The message
m = secret;
%The commitment
format rat %Otherwise the result will not be exact
c = mod(g^m * h^r, p);
format short

%% Task 5
%% Task 6
%% Task 7

%Step 1 - - - Send a to verifier
%"Random values"
r_1 = 16;
r_2 = 5;

format rat
a = mod(g^r_1 * h^r_2, p);
disp("a = " + a)

%Step 2 - - - Verifier sends e to prover
e = 1;              %Calulated from assignment

%Step 3 - - - Send z_1 and z_2 to verifier
z_1 = mod(r_1 + e*secret, p);
z_2 = mod(r_2 + e*r, p);
disp("z_1 = " + z_1)
disp("z_2 = " + z_2)

%"Step 4" - - - Verifier verifies the answer
LHS = mod(g^z_1 * h^z_2, p);
RHS = mod(a*c^e, p);
format short

if LHS == RHS
    disp("Verifier accepts!")
else
    disp("Verifier angry!")
end





















